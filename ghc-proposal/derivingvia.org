Issues listed with TODO

* DerivingVia

Derive instances for a datatype through instances for any other type
of the same representation. It adds the =via= deriving strategy that
allows listing classes to derive and then the type (=ViaType=) whose
instances to use.

: data ...
:   deriving (Cls1, Cls2)
:     via ViaType

Here you should write a short abstract motivating and briefly
summarizing the proposed change.

* Motivation
Today many instances are literally copy-pasted for each type or solved
with a preprocessor, this extension allows describing this pattern
once and for all and extending GHC's deriving mechanism to use
=deriving= rather than some external tool.

Give a strong reason for why the community needs this change. Describe
the use case as clearly as possible and give an example. Explain how
the status quo is insufficient or not ideal.

* Proposed Change Specification
Specify the change in precise, comprehensive yet concise
language. Avoid words like should or could. Strive for a complete
definition. Your specification may include,

+ grammar and semantics of any new syntactic constructs
+ the types and semantics of any new library interfaces
+ how the proposed change interacts with existing language or compiler features, in case that is otherwise ambiguous

Note, however, that this section need not describe details of the implementation of the feature. The proposal is merely supposed to give a conceptual specification of the new feature and its behavior.

* Effect and Interactions
Types defined with no knowledge of =DerivingVia= are fully compatible
with it, QuickCheck modifiers and wrappers like =WrappedMonad=,
=WrappedArrow=.

The only requirement is 
  
Detail how the proposed change addresses the original problem raised
in the motivation.

Discuss possibly contentious interactions with existing language or
compiler features.


* Costs and Drawbacks
Give an estimate on development and maintenance costs. List how this
effects learnability of the language for novice users. Define and list
any remaining drawbacks that cannot be resolved.


* Alternatives
For a given deriving via

: data ABC = A | B | C
:   deriving Eq
:     via (Via ABC)

the user can do the job of the compiler and manually insert a =coerce=
for each method taking care to correctly instantiate type variables
when present

: instance Eq ABC where
:   (==) :: ABC -> ABC -> Bool
:   (==) = coerce ((==) :: Via ABC -> Via ABC -> Bool)
: 
:   (/=) :: ABC -> ABC -> Bool
:   (/=) = coerce ((/=) :: Via ABC -> Via ABC -> Bool)

If deriving is limited to a single =Via= type and an additional
=newtype= layer is acceptable, =GeneralizedNewtypeDeriving= will do
(TODO: when is this actually possible and when is it not?)

: data ABC_ = A | B | C
: 
: newtype ABC (Via ABC_)
:   deriving Eq

but this means we can't derive from

Some uses can be encoded with GND
  
List existing alternatives to your proposed change as they currently
exist and discuss why they are insufficient.
* Unresolved questions
Explicitly list any remaining issues that remain in the conceptual
design and specification. Be upfront and trust that the community will
help. Please do not list *implementation* issues.

Hopefully this section will be empty by the time the proposal is
brought to the steering committee.
* Implementation Plan
There is already an implementation at https://github.com/RyanGlScott/ghc/tree/deriving-via
